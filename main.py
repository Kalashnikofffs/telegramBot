import logging

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, bot, Poll, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler

# function to handle the /start command
# def start(update, context):
#     update.message.reply_text('–ö–∞–∫ –Ω–∞–º –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è: –Ω–∞ –¢—ã –∏–ª–∏ –Ω–∞ –í—ã?')
# # function to handle the /help command


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

FIRST, SECOND, THIRD, FOURS, FIFTH, SIX, SEVENTH = range(7)
# –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
ONE, TWO, THREE, FOUR = range(4)

def start(update,context):
    text = "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
    keyboard = [
        [

            InlineKeyboardButton("–í–∏–¥–µ–æ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ üëå",
                                 url="https://youtu.be/Q6DpndLdvXg"),
            InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥ –±–æ—Ç–∞ üëå", url="https://github.com/Kalashnikofffs/telegramBot/blob/master/main.py"),

        ],
        [
            InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ üëå", callback_data='13'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=reply_markup)






def start_over(update, context):


    keyboard = [
        [
            InlineKeyboardButton("–ù–∞ –¢—ã üëå", callback_data='1'),
            InlineKeyboardButton("–ù–∞ –í—ã ü§ù", callback_data='2')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)

    context.bot.send_message(chat_id=update.effective_chat.id, text='–ö–∞–∫ –≤–∞–º –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è: –Ω–∞ –¢—ã –∏–ª–∏ –Ω–∞ –í—ã?',reply_markup=reply_markup)

    return FIRST


def naTiiliNaVI(update, context):
    query = update.callback_query
    query.answer()
    keyboard = [

        [
            InlineKeyboardButton("–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–æ–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è(–°–í–û)", callback_data='3')
        ],
        [
            InlineKeyboardButton("–í–æ–π–Ω–∞/–≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤–æ–π–Ω–∞ –£–∫—Ä–∞–∏–Ω—É", callback_data='3')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)

    if query.data == '1':
        context.user_data['1'] = '1'
        query.edit_message_text(
            text=f"–° 24 —Ñ–µ–≤—Ä–∞–ª—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –£–∫—Ä–∞–∏–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ú–Ω–µ–Ω–∏—è –æ —Ç–æ–º –∫–∞–∫ –∏—Ö –Ω–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å. –ê –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å –¢—ã?",
            reply_markup=reply_markup)

    if query.data == '2':
        context.user_data['1'] = '2'
        query.edit_message_text(
            text=f"–° 24 —Ñ–µ–≤—Ä–∞–ª—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –£–∫—Ä–∞–∏–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ú–Ω–µ–Ω–∏—è –æ —Ç–æ–º –∫–∞–∫ –∏—Ö –Ω–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å. –ê –∫–∞–∫ —Å—á–∏—Ç–∞–µ—Ç–µ –í—ã?",
            reply_markup=reply_markup)

    return SECOND


def kakOtnosites(update, context):
    query = update.callback_query
    query.answer()
    text = '–ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –≤—Ç–æ—Ä–∂–µ–Ω–∏—é –†–§ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –£–∫—Ä–∞–∏–Ω—ã?'
    if context.user_data['1'] == '2':
        text = '–ö–∞–∫ –í—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –≤—Ç–æ—Ä–∂–µ–Ω–∏—é –†–§ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –£–∫—Ä–∞–∏–Ω—ã?'
    keyboard = [

        [
            InlineKeyboardButton("–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", callback_data='4'),
            InlineKeyboardButton("–°–∫–æ—Ä–µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", callback_data='4')
        ],
        [
            InlineKeyboardButton("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è", callback_data='5'),
            InlineKeyboardButton("–°–∫–æ—Ä–µ–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", callback_data='6')
        ],
        [
            InlineKeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é", callback_data='6')
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)
    query.edit_message_text(text=text, reply_markup=reply_markup)

    return THIRD


def z(update, context):
    query = update.callback_query
    query.answer()
    text = '–ö–∞–∫ —Ç—ã —Å—á–∏—Ç–∞–µ—â—å, –∫–∞–∫–∏–µ –∏—Ö —ç—Ç–∏—Ö —Ü–µ–ª–µ–π —Å—Ç–∞–≤–∏–ª–∏—Å—å –†–æ—Å—Å–∏–µ–π –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –æ –≤—Ç–æ—Ä–∂–µ–Ω–∏–∏ –≤ –£–∫—Ä–∞–∏–Ω—É?'
    if context.user_data['1'] == '2':
        text = '–ö–∞–∫ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, –∫–∞–∫–∏–µ –∏—Ö —ç—Ç–∏—Ö —Ü–µ–ª–µ–π —Å—Ç–∞–≤–∏–ª–∏—Å—å –†–æ—Å—Å–∏–µ–π –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –æ –≤—Ç–æ—Ä–∂–µ–Ω–∏–∏ –≤ –£–∫—Ä–∞–∏–Ω—É'
    keyboard = [

        [
            InlineKeyboardButton("–ó–∞—â–∏—Ç–∏—Ç—å —Ä—É—Å—Å–∫–∏—Ö –≤ –î–æ–Ω–±–∞—Å–µ", callback_data='7'),
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏", callback_data='7')
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ –£–∫—Ä–∞–∏–Ω—ã –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –õ–ù–†/–î–ù–†", callback_data='7')
        ],
        [
            InlineKeyboardButton("–î–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è/–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –Ω–∞—Ü–∏—Å—Ç–æ–≤", callback_data='7')
        ],
        [
            InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –≤–ª–∞—Å—Ç—å –≤ –£–∫—Ä–∞–∏–Ω–µ", callback_data='7')
        ],
        [
            InlineKeyboardButton("–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –±–∏–æ–ª–∞–±–∞—Ä–æ—Ç–æ—Ä–∏–∏", callback_data='7')
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è", callback_data='7')
        ],
        [
            InlineKeyboardButton("–ü–æ–≤—ã—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–≤–µ—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –î–µ –ú–æ—Ä—Ç–∞", callback_data='7')
        ],
        [
            InlineKeyboardButton("–ó–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –î–æ–Ω–±–∞—Å–∞ –∏ —é–≥–∞ –£–∫—Ä–∞–∏–Ω—ã", callback_data='7')
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –±–∞–∑ –ù–ê–¢–û –≤ –£–∫—Ä–∞–∏–Ω–µ", callback_data='7')
        ],
        [
            InlineKeyboardButton("–Ø –Ω–µ –∑–Ω–∞—é...", callback_data='8')
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)
    query.edit_message_text(text=text, reply_markup=reply_markup)

    return FOURS


def z1(update, context):
    query = update.callback_query
    query.answer()
    text = '–î–æ–≤–µ—Ä—è–µ—à—å –ª–∏ —Ç—ã –Ω–æ–≤–æ—Å—Ç—è–º –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏–∑ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞?'
    if context.user_data['1'] == '2':
        text = '–î–æ–≤–µ—Ä—è–µ—Ç–µ –ª–∏ –í—ã –Ω–æ–≤–æ—Å—Ç—è–º –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏–∑ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞?'

    keyboard = [

        [
            InlineKeyboardButton("–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä—è—é", callback_data='9'),
        ],
        [
            InlineKeyboardButton("–°–∫–æ—Ä–µ–µ –¥–∞", callback_data='9')
        ],
        [
            InlineKeyboardButton("–°–∫–æ—Ä–µ–µ –Ω–µ—Ç", callback_data='9')
        ],
        [
            InlineKeyboardButton("–ù–µ—Ç, —Å–æ–≤—Å–µ–º –Ω–µ—Ç –¥–æ–≤–µ—Ä—è—é", callback_data='9')
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)
    query.edit_message_text(text=text, reply_markup=reply_markup)

    return FIFTH


def z2(update, context):
    query = update.callback_query
    query.answer()
    text = '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    context.bot.send_message(update.effective_chat.id, text=text)


def z3(update, context):
    query = update.callback_query
    query.answer()
    text = '–ü–æ–º–∏–º–æ –¢–í, –µ—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ö–∞–∫–∏–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—ã –¥–æ–≤–µ—Ä—è–µ—à—å?'
    if context.user_data['1'] == '2':
        text = '–ü–æ–º–∏–º–æ –¢–í, –µ—â–µ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ö–∞–∫–∏–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ?'

    keyboard = [

        [
            InlineKeyboardButton("–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏", callback_data='10'),
        ],
        [
            InlineKeyboardButton("Russia Today", callback_data='10')
        ],
        [
            InlineKeyboardButton("Meduza/Mediazona/BBC/–†–∞–¥–∏–æ —Å–≤–æ–±–æ–¥–∞/ –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è", callback_data='10')
        ],
        [
            InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞", callback_data='10')
        ],
        [
            InlineKeyboardButton("–¢–ì-–∫–∞–Ω–∞–ª—ã: –í–æ–µ–Ω–Ω—ã–π –æ—Å–≤–µ–¥–æ–º–∏—Ç–µ–ª—å/ WarGonzo /Kotsnews", callback_data='10')
        ],
        [
            InlineKeyboardButton("–¢–ì-–∫–∞–Ω–∞–ª: –í–æ–π–Ω–∞ —Å —Ñ–µ–π–∫–∞–º–∏", callback_data='10')
        ],
        [
            InlineKeyboardButton("–†–ë–ö", callback_data='10')
        ],
        [
            InlineKeyboardButton("–¢–ê–ê–°/–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è –ø—Ä–∞–≤–¥–∞/–ê–∏–§/–í–µ–¥–æ–º–æ—Å—Ç–∏/–õ–µ–Ω—Ç–∞", callback_data='10')
        ],
        [
            InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –ù–æ–≤–æ—Å—Ç–∏", callback_data='10')
        ],
        [
            InlineKeyboardButton("–í–∏–∫–∏–ø–µ–¥–∏—è", callback_data='10')
        ],
        [
            InlineKeyboardButton("–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö...", callback_data='10')
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)
    query.edit_message_text(text=text, reply_markup=reply_markup)
    return SIX


def z4(update, context):
    questions = '–ö–æ–º—É –∏–∑ —ç—Ç–∏—Ö –ª—é–¥–µ–π —Ç—ã –¥–æ–≤–µ—Ä—è–µ—à—å?'
    answer = ['–í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω',
              '–î–º–∏—Ç—Ä–∏–π –ü–µ—Å–∫–æ–≤',
              '–†–∞–º–∑–∞–Ω –ö–∞–¥—ã—Ä–æ–≤',
              '–ê–ª–µ–∫—Å–µ–π –ù–∞–≤–∞–ª—å–Ω—ã–π',
              '–°–µ—Ä–≥–µ–π –õ–≤–∞—Ä–æ–≤',
              '–Æ—Ä–∏–π –ü–æ–¥–æ–ª—è–∫–∞'
        , '–ú–∞–∫—Å–∏–º –ö–∞—Ü',
              '–í–ª–∞–¥–∏–º–∏—Ä –°–æ–ª–æ–≤—å—ë–≤',
              '–û–ª—å–≥–∞ –°–∫–æ–±–µ–µ–≤–∞',
              '–ú–∏—Ö–∞–∏–ª –•–æ–¥–æ—Ä–∫–æ–≤—Å–∫–∏–π'
              '–ù–∏–∫–æ–º—É –∏–∑ –Ω–∏—Ö'
              ]
    if context.user_data['1'] == '2':
        questions = '–ö–æ–º—É –∏–∑ —ç—Ç–∏—Ö –ª—é–¥–µ–π –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ?'

    keyboard = [
        [
            InlineKeyboardButton("–ò–¥—ë–º –¥–∞–ª—å—à–µ", callback_data='11'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)

    message = context.bot.send_poll(
        update.effective_chat.id, questions, answer,
        is_anonymous=False, allows_multiple_answers=True, reply_markup=reply_markup
    )
    payload = {
        message.poll.id: {
            "questions": questions,
            "message_id": message.message_id,
            "chat_id": update.effective_chat.id,
            "answers": 0,
        }
    }

    context.bot_data.update(payload)

    return SEVENTH


def z5(update, context):
    query = update.callback_query
    query.answer()
    text = '–°—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ –ü—É—Ç–∏–Ω —Ö–æ—Ä–æ—à–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç?'
    if context.user_data['1'] == '2':
        text = '–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ –ü—É—Ç–∏–Ω —Ö–æ—Ä–æ—à–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç?'

    keyboard = [
        [
            InlineKeyboardButton("–î–∞", callback_data='11'),
            InlineKeyboardButton("–ù–µ—Ç", callback_data='11'),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_photo(chat_id=update.effective_chat.id, caption=text, photo=open('venv/pic/putin-stol-mem-768x512.jpg', 'rb'), reply_markup=reply_markup)

    return FOURS


def receive_poll_answer(update, context):
    """–ò—Ç–æ–≥–∏ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    answer = update.poll_answer
    poll_id = answer.poll_id
    try:
        questions = context.bot_data[poll_id]["questions"]
    except KeyError:  # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—ã–π –æ–ø—Ä–æ—Å
        return
    selected_options = answer.option_ids
    answer_string = ""
    # –ø–æ–¥—Å—á–µ—Ç –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for question_id in selected_options:
        if question_id != selected_options[-1]:
            answer_string += questions[question_id] + " –∏ "
        else:
            answer_string += questions[question_id]
    context.bot.send_message(
        context.bot_data[poll_id]["chat_id"],
        f"{update.effective_user.mention_html()} => {answer_string}!",
        parse_mode=ParseMode.HTML,
    )
    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ `bot_data`
    context.bot_data[poll_id]["answers"] += 1
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ —Ç—Ä–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if context.bot_data[poll_id]["answers"] == 2:
        context.bot.stop_poll(
            context.bot_data[poll_id]["chat_id"], context.bot_data[poll_id]["message_id"]
        )


if __name__ == '__main__':
    TOKEN = "5583888317:AAGNr8IzYoA9Bei5AQmgmPHaEiBioiMIFO4"

    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO)

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_over, pattern='^' + '13' + '$')],
        states={  # —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            FIRST: [
                CallbackQueryHandler(naTiiliNaVI, pattern='^' + '1' + '$'),
                CallbackQueryHandler(naTiiliNaVI, pattern='^' + '2' + '$'),
            ],
            SECOND: [
                CallbackQueryHandler(kakOtnosites, pattern='^' + '3' + '$'),


            ],

            THIRD: [
                CallbackQueryHandler(z, pattern='^' + '4' + '$'),
                CallbackQueryHandler(z5, pattern='^' + '5' + '$'),
                CallbackQueryHandler(z2, pattern='^' + '6' + '$'),
            ],
            FOURS: [
                CallbackQueryHandler(z1, pattern='^' + '7' + '$'),
                CallbackQueryHandler(z2, pattern='^' + '8' + '$'),
                CallbackQueryHandler(z2, pattern='^' + '11' + '$'),
            ],
            FIFTH: [
                CallbackQueryHandler(z3, pattern='^' + '9' + '$'),
            ],
            SIX: [
                CallbackQueryHandler(z4, pattern='^' + '10' + '$'),
                CallbackQueryHandler(z2, pattern='^' + '11' + '$'),
            ],
            SEVENTH: [

                CallbackQueryHandler(z2, pattern='^' + '11' + '$'),

            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(CommandHandler('start', start))

    updater.start_polling()

    updater.idle()
